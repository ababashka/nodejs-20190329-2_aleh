/* eslint-disable */const url = require('url');const http = require('http');const path = require('path');const fs = require('fs');const LimitSizeStream = require('./LimitSizeStream');const createFile = require('./create-file');const FilesDirectory = path.join(__dirname, 'files');const server = new http.Server();server.on('request', (req, res) => {    const pathname = url.parse(req.url).pathname.slice(1);    const filepath = path.join(FilesDirectory, pathname);    switch (req.method) {        case 'POST':            const limitStream = new LimitSizeStream({ limit: 1e6 });            if (fs.existsSync(filepath)) {                res.statusCode = 409;                res.end('File already exists!')                return;            }            const wstream = fs.createWriteStream(filepath, { flags: 'wx' });            req                .on('aborted', () => {                    wstream.close();                    deleteFile(filepath);                })                .on('error', () => {                    res.end('Error');                });            wstream                .on('error', (err) => {                    res.statusCode = 500;                    res.end('Server error!');                })                .on('finish', () => {                    res.statusCode = 201;                    res.end('CREATED!');                    wstream.close();                });            req                .pipe(limitStream)                .on('error', () => {                    res.statusCode = 413;                    res.end('Too large file!');                    wstream.close();                    deleteFile(filepath);                })                .pipe(wstream);            break;        default:            res.statusCode = 501;            res.end('Not implemented');    }});function deleteFile(filepath) {    try {        fs.unlink(filepath, (err) => {});    } catch (e) {}}module.exports = server;